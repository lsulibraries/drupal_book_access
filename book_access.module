<?php
// $Id$

/**
 * @file
 *
 * Allow access control for Drupal book nodes.
 *
 * Based on forum_access.module and tac_lite.module
 *
 * TODO:
 *  -
 *  -
 *  -
 *
 */

/**
 * Implementation of hook_help()
 */
function book_access_help($section) {
  switch ($section) {
    case 'admin/content/book/access':
      return t('
        <p>Configure access control per book based on user roles. Settings
        affect all pages within the given book. If a page is moved into a
        different book, it will assume that book\'s access control settings.</p>
        <p>These settings will have no effect for roles with "administer nodes"
        permission.</p>
        <p>For more information, see the !book_access_help page.</p>
      ',  array(
            '!book_access_help' => l(t('Book Access help'), 'admin/help/book_access'),
            '!book_access_settings' => l(t('Book Access settings'), 'admin/content/book/access'),
          )
      );
      break;
    case 'admin/help#book_access':
      return t('
        <p>Allows fine grained access control for books.</p>
        <p>Permissions enabled in !access_control_settings will override
        !book_access_settings. So, for example, if you would like a role to be
        able to edit all book pages, regardless, enable "edit pages" in
        !access_control_settings. However, if you would like to control edit
        permission on a per book basis, disable that permission in
        !access_control_settings and configure !book_access_settings
        accordingly.
        <p>Certain access control modules can impact functionality of this
        module. Broad reaching modules such as "taxonomy access" and "content
        access" can override the values set in the !book_access_settings page.
        You must turn off all enabled access controls in such modules.
        ', array(
              '!book_access_settings' => l(t('book access settings'), 'admin/content/book/access'),
              '!access_control_settings' => l(t('access control settings'), 'admin/user/access'),
            )

      );
      break;
  }
}

/**
 * Implementation of hook_perm().
 *
 */
function book_access_perm() {
  return array('administer book access');
}

/**
 * Implementation of hook_menu().
 *
 */
function book_access_menu($may_cache) {

  if ($may_cache) {
    // we create an additional tab in the book admin page
    $items[] = array(
      'path'               => 'admin/content/book/access',
      'title'              => t('Access control'),
      'callback'           => 'drupal_get_form',
      'callback arguments' => array('book_access_admin_form'),
      'type'               => MENU_LOCAL_TASK,
      'weight'             => 7,
      'access'             => user_access('administer book access'),
    );
  }

  return $items;
}

/**
 * This function supplies the book access grants. book_access simply uses
 * roles as grant IDs.
 */
function book_access_node_grants($user, $op) {
  $grants['book_access'] = array_keys($user->roles);
  return $grants;
}

/**
 * Implementation of hook_node_access_records().
 *
 * Returns a list of grant records for the passed in book node object. If we
 * have a book child page, we return the access settings of the top level parent.
 * Checks to see if maybe we're being disabled.
 */
function book_access_node_access_records($node) {
  if (!book_access_enabled()) {
    return;
  }

  if ($node->type == 'book') {
    $parent_nid = _book_access_get_book_nid($node->nid);

    $result = db_query('SELECT * FROM {book_access} WHERE nid = %d', $parent_nid);
    while ($grant = db_fetch_object($result)) {
      $grants[] = array(
        'realm'        => 'book_access',
        'gid'          => $grant->rid,
        'grant_view'   => $grant->grant_view,
        'grant_update' => $grant->grant_update,
        'grant_delete' => $grant->grant_delete
      );
    }

    return $grants;
  }
}

/**
 * Book access configuration page.
 *
 */
function book_access_admin_form() {
  $form = array();
  $rids = array();
  $books = array();

  drupal_add_css(drupal_get_path('module', 'book_access') . '/book_access.css');

  // Get a list of roles (which act as grant IDs)
  $results = db_query("SELECT r.rid, r.name FROM {role} r ORDER BY r.name");
  while ($result = db_fetch_object($results)) {
    $rids[$result->rid] = $result->name;
  }

  // Get listing of books, each of which will have it's own access settings
  $sql = "
    SELECT n.nid, n.title
    FROM {node} n
    LEFT JOIN {book} b ON n.vid = b.vid
    WHERE b.parent = 0
    ORDER BY b.weight ASC
  ";

  $book_results = db_query($sql);

  while ($book = db_fetch_object($book_results)) {
    $books[$book->nid] = $book->title;
  }

  // Each book has its own access control settings
  foreach ($books as $book_nid => $book_name) {

    // used to store existing grants for this book
    $view   = array();
    $update = array();
    $delete = array();

    $result = db_query("SELECT * FROM {book_access} where nid = %d", $book_nid);

    // if no existing grants, use some safe defaults
    if (db_num_rows($result) == 0) {
      $view   = array(1, 2);
      $update = array();
      $delete = array();
    }
    else {
      while ($book_access = db_fetch_object($result)) {
        if ($book_access->grant_view) {
          $view[] = $book_access->rid;
        }
        if ($book_access->grant_update) {
          $update[] = $book_access->rid;
        }
        if ($book_access->grant_delete) {
          $delete[] = $book_access->rid;
        }
      }
    }

    $form['#tree'] = TRUE;

    $form['access'][$book_nid] = array(
      '#type'        => 'fieldset',
      '#title'       => $book_name,
      '#collapsible' => TRUE,
    );

    $form['access'][$book_nid]['view'] = array(
      '#type'          => 'checkboxes',
      '#prefix'        => '<div class="book-access-div">',
      '#suffix'        => '</div>',
      '#options'       => $rids,
      '#title'         => t('View this book'),
      '#default_value' => $view
    );
    $form['access'][$book_nid]['update'] = array('#type' => 'checkboxes',
      '#prefix'        => '<div class="book-access-div">',
      '#suffix'        => '</div>',
      '#options'       => $rids,
      '#title'         => t('Edit pages in this book'),
      '#default_value' => $update
    );
    $form['access'][$book_nid]['delete'] = array('#type' => 'checkboxes',
      '#prefix'        => '<div class="book-access-div">',
      '#suffix'        => '</div>',
      '#options'       => $rids,
      '#title'         => t('Delete pages in this book'),
      '#default_value' => $delete
    );
  }

  $form['clearer'] = array(
    '#value' => '<div class="book-access-clearer"></div>',
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Submit'),
  );
  $form['notice'] = array(
    '#type'  => 'markup',
    '#value' => '<p>' . t('Node access tables must be rebuilt when these changes are
      submitted. This may take a few moments.') . '</p>',
  );

  return $form;
}

function book_access_admin_form_submit($form_id, $form_values) {

  foreach($form_values['access'] as $book_nid => $form) {
    db_query("DELETE FROM {book_access} WHERE nid = %d", $book_nid);

    foreach ($form['view'] as $rid => $checked) {
      $gid = $rid;
      $grant_view = (bool) $checked;
      $grant_update = $form['update'][$rid] > 0 ? TRUE : FALSE;
      $grant_delete = $form['delete'][$rid] > 0 ? TRUE : FALSE;

      $sql = "
        INSERT INTO {book_access} (nid, rid, grant_view, grant_update, grant_delete)
        VALUES (%d, %d, %d, %d, %d)
      ";

      db_query($sql, $book_nid, $rid, $grant_view, $grant_update, $grant_delete);
    }
  }
  node_access_rebuild();
}

/**
 * Helper function.
 */
function book_access_enabled($set = NULL) {
  static $enabled = TRUE;
  if ($set !== NULL) {
    $enabled = $set;
  }
  return $enabled;
}

/**
 * Implementation of hook_enable().
 */
function book_access_enable() {
  node_access_rebuild();
}

/**
 * Implementation of hook_disable().
 */
function book_access_disable() {
  book_access_enabled(FALSE);
  node_access_rebuild();
}

/**
 * Return array of book nodes and their parents.
 */
function _book_access_get_parents() {
  static $parents;

  if (!is_array($parents)) {
    $sql = "
      SELECT n.nid, b.parent
      FROM {node} n
      LEFT JOIN {book} b ON n.vid = b.vid
      WHERE n.type = 'book'
    ";

    $results = db_query($sql);
    while ($result = db_fetch_object($results)) {
      $parents[$result->nid] = $result->parent;
    }
  }

  return $parents;
}

/**
 * Return the very top level (book) nid for a given book page.
 */
function _book_access_get_book_nid($nid) {
  $parents = _book_access_get_parents();

  if ($parents[$nid] == 0) {
    return $nid;
  }
  else {
    return _book_access_get_book_nid($parents[$nid]);
  }
}
